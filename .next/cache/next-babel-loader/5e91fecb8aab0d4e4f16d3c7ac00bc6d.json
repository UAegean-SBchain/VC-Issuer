{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport AadeForm from \"../../../components/AadeForm\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nclass IssueE1 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submit\", values => {\n      // print the form values to the console\n      // alert(values);\n      console.log(values);\n      let sessionFrag = this.props.sealSession ? `?session=${this.props.sealSession}&name=${values.name}&surname=${values.surname}&dateOfBirth=${encodeURI(values.dateOfBirth)}` : \"\";\n      window.location.href = `${this.props.baseUrl}/e1/getData${sessionFrag}`;\n    });\n\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithTaxisAuth = this.proceedWithTaxisAuth.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.e1 !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`e1.js:: in the server the seal session is:: ${req.session.sealSession}`);\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      noUserError: req.session.error,\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.e1) {\n      let toSelect = [this.props.sessionData.e1];\n      this.props.setE1ToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, isMobile());\n      }\n    }\n  }\n\n  proceedWithTaxisAuth() {\n    let sessionFrag = this.props.sealSession ? `?session=${this.props.sealSession}` : \"\";\n    window.location.href = this.props.baseUrl === \"\" ? `/e1/getData${sessionFrag}` : `${this.props.baseUrl}e1/getData${sessionFrag}`;\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Query for your Data\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.uuid,\n        sealSession: this.props.uuid\n      }));\n    }\n\n    let aadeLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n      onClick: this.proceedWithTaxisAuth\n    }, \"AADE login\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"AADE login\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes // vcIssuanceEndpoint={\"/issueVCSecure\"}\n      ,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"E1\"\n    });\n\n    let eidasCard = this.props.noUserError ? __jsx(\"div\", {\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, \" \", this.props.noUserError, \" \") : __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a Verifiable Credential containing financial details from AADE\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, aadeLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.sealSession,\n      card: eidasCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      selfForm: __jsx(AadeForm, {\n        onSubmit: this.submit,\n        error: this.props.noUserError\n      }),\n      formDataUploaded: this.hasRequiredAttributes\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setE1ToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: uri => {\n      dispatch(setEidasRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueE1);","map":{"version":3,"sources":["/home/ni/code/js/sbchain-issuer/pages/vc/issue/e1.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","completeDIDAuth","makeSealSession","makeSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","isMobile","AadeForm","ConnectMobile","transport","require","IssueE1","Component","constructor","props","values","console","log","sessionFrag","sealSession","name","surname","encodeURI","dateOfBirth","window","location","href","baseUrl","dispatch","isFetching","sessionData","proceedWithTaxisAuth","bind","hasRequiredAttributes","undefined","e1","getInitialProps","reduxStore","req","userSessionData","DIDOk","session","userData","enpoint","DID","getState","noUserError","error","qrData","vcSent","componentDidMount","toSelect","setE1ToSelection","startSessionAndDidAuth","makeConnectionRequest","render","stepNumber","stepperSteps","title","uuid","aadeLoginButton","issueVCBut","userSelection","eidasCard","marginTop","result","submit","mapStateToProps","state","appReducer","fetching","eidasUri","eidasPort","endpoint","eidasRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","didAuthOK","startSealSession","setTheSealSession","sessionId","setEidas","uri","data","setEidasRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  // setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport AadeForm from \"../../../components/AadeForm\";\nimport ConnectMobile from \"../../../components/ConnectMobile\"\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueE1 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithTaxisAuth = this.proceedWithTaxisAuth.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.e1 !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n\n      console.log(\n        `e1.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      noUserError:  req.session.error,\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.e1) {\n      let toSelect = [this.props.sessionData.e1];\n      this.props.setE1ToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          isMobile()\n        );\n      }\n    }\n  }\n\n  submit = (values) => {\n    // print the form values to the console\n    // alert(values);\n    console.log(values);\n    let sessionFrag = this.props.sealSession\n      ? `?session=${this.props.sealSession}&name=${values.name}&surname=${\n          values.surname\n        }&dateOfBirth=${encodeURI(values.dateOfBirth)}`\n      : \"\";\n    window.location.href = `${this.props.baseUrl}/e1/getData${sessionFrag}`;\n  };\n\n  proceedWithTaxisAuth() {\n    let sessionFrag = this.props.sealSession\n      ? `?session=${this.props.sealSession}`\n      : \"\";\n    window.location.href = (this.props.baseUrl === \"\")? `/e1/getData${sessionFrag}`  : `${this.props.baseUrl}e1/getData${sessionFrag}`;\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Query for your Data\"' },\n      { title: \"Request Issuance\" },\n    ];\n\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.uuid}\n            sealSession={this.props.uuid}\n          />\n        </Layout>\n      );\n    }\n\n    let aadeLoginButton = !this.hasRequiredAttributes ? (\n      <Button onClick={this.proceedWithTaxisAuth}>AADE login</Button>\n    ) : (\n      <Button variant=\"primary\" disabled>\n        AADE login\n      </Button>\n    );\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        // vcIssuanceEndpoint={\"/issueVCSecure\"}\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"E1\"}\n      />\n    );\n\n    let eidasCard = this.props.noUserError? (<div style={{ marginTop: \"2rem\" }}> {this.props.noUserError} </div>) :(\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>\n          Issue a Verifiable Credential containing financial details from AADE\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through the required data sources, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{aadeLoginButton}</Col>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.sealSession}\n        card={eidasCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        selfForm={<AadeForm onSubmit={this.submit} error={this.props.noUserError}/>}\n        formDataUploaded={this.hasRequiredAttributes}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setE1ToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueE1);\n"]},"metadata":{},"sourceType":"module"}