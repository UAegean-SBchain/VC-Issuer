{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport SelForm from \"../../../components/SelForm\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport ContactDetailsForm from \"../../../components/contactDetailsForm\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nclass IssueContact extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submit\", values => {\n      console.log(values);\n      values.source = \"contact\";\n      let toSelect = [values];\n      this.props.setSefToSelection(toSelect);\n      axios.post(\"../../contact/store\", {\n        session: this.props.sealSession,\n        details: values\n      }).then(data => {\n        console.log(\"updated backend with selection\");\n      }).then(response => {\n        this.props.setContactToSession({\n          contact: values\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.contact !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl)); // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`self.js:: in the server the seal session is:: ${req.session.sealSession}`);\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession; // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    // if (this.props.sessionData && this.props.sessionData.contact) {\n    //   let toSelect = [this.props.sessionData.amka];\n    //   this.props.setSefToSelection(toSelect);\n    // }\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, isMobile());\n      }\n    }\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: \"Declare Self Attested Attributes\"\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.uuid,\n        sealSession: this.props.uuid\n      }));\n    }\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.contact !== undefined,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"CONTACT-DETAILS\"\n    });\n\n    let selfCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a Verifiable Credential containing self attested attributes\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"You have completed the self attestation of the required attributes, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.sealSession,\n      card: selfCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      formDataUploaded: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.contact !== undefined,\n      selfForm: __jsx(ContactDetailsForm, {\n        onSubmit: this.submit\n      })\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setContactToSession: userSessionData => {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueContact);","map":{"version":3,"sources":["/home/ni/code/js/sbchain-issuer/pages/vc/issue/contact.js"],"names":["React","axios","SelForm","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","completeDIDAuth","makeSealSession","makeSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","isMobile","ContactDetailsForm","ConnectMobile","transport","require","IssueContact","Component","constructor","props","values","console","log","source","toSelect","setSefToSelection","post","session","sealSession","details","then","data","response","setContactToSession","contact","catch","error","dispatch","isFetching","sessionData","hasRequiredAttributes","undefined","getInitialProps","reduxStore","req","userSessionData","DIDOk","userData","enpoint","baseUrl","DID","getState","qrData","vcSent","componentDidMount","startSessionAndDidAuth","makeConnectionRequest","render","stepNumber","stepperSteps","title","uuid","issueVCBut","userSelection","selfCard","marginTop","result","submit","mapStateToProps","state","appReducer","fetching","eidasUri","eidasPort","endpoint","eidasRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","didAuthOK","startSealSession","setTheSealSession","sessionId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport SelForm from \"../../../components/SelForm\";\n\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  // setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport ContactDetailsForm from \"../../../components/contactDetailsForm\";\nimport ConnectMobile from \"../../../components/ConnectMobile\"\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueContact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.contact !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(\n        `self.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n        // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    // if (this.props.sessionData && this.props.sessionData.contact) {\n    //   let toSelect = [this.props.sessionData.amka];\n    //   this.props.setSefToSelection(toSelect);\n    // }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          isMobile()\n        );\n      }\n    }\n  }\n\n \n  submit = (values) => {\n   \n    console.log(values);\n    values.source = \"contact\";\n    let toSelect = [values];\n    this.props.setSefToSelection(toSelect);\n    axios\n      .post(\"../../contact/store\", {\n        session: this.props.sealSession,\n        details: values,\n      })\n      .then((data) => {\n        console.log(\"updated backend with selection\");\n      })\n      .then((response) => {\n        this.props.setContactToSession({ contact: values });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: \"Declare Self Attested Attributes\" },\n      { title: \"Request Issuance\" },\n    ];\n\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.uuid}\n            sealSession={this.props.uuid}\n          />\n        </Layout>\n      );\n    }\n\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={\n          this.props.sessionData !== null &&\n          this.props.sessionData !== undefined &&\n          this.props.sessionData.contact !== undefined\n        }\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"CONTACT-DETAILS\"}\n      />\n    );\n\n    let selfCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>\n          Issue a Verifiable Credential containing self attested attributes\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n           You have completed the self attestation of the required attributes, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n      </Card>\n    );\n\n\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.sealSession}\n        card={selfCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        formDataUploaded={\n          this.props.sessionData !== null &&\n          this.props.sessionData !== undefined &&\n          this.props.sessionData.contact !== undefined\n        }\n        selfForm={<ContactDetailsForm onSubmit={this.submit} />}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setContactToSession: (userSessionData) => {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueContact);\n"]},"metadata":{},"sourceType":"module"}