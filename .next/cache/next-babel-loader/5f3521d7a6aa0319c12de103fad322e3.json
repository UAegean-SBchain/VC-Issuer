{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nclass IssueAmka extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithAmkaAuth = this.proceedWithAmkaAuth.bind(this);\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.amka !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl)); // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`eidas.js:: in the server the seal session is:: ${req.session.sealSession}`); // reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      // reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri))\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession; // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.amka) {\n      let toSelect = [this.props.sessionData.amka];\n      this.props.setAmkaToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, isMobile());\n      }\n    }\n  }\n\n  proceedWithAmkaAuth() {\n    let sessionFrag = this.props.sealSession ? `?session=${this.props.sealSession}` : '';\n    window.location.href = this.props.baseUrl ? `${this.props.baseUrl}amka/amka-authenticate${sessionFrag}` : `${this.props.baseUrl}/amka/amka-authenticate${sessionFrag}`;\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Pair your wallet\"\n    }, {\n      title: 'Authenticate over \"A.M.K.A Check Service\"'\n    }, {\n      title: \"Request Issuance\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.uuid,\n        sealSession: this.props.uuid\n      }));\n    }\n\n    let amkaLoginButton = !this.hasRequiredAttributes ? __jsx(Button, {\n      onClick: this.proceedWithAmkaAuth\n    }, \"A.M.K.A\") : __jsx(Button, {\n      variant: \"primary\",\n      disabled: true\n    }, \"A.M.K.A\");\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.hasRequiredAttributes // vcIssuanceEndpoint={\"/issueVCSecure\"}\n      ,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"AMKA\"\n    });\n\n    let eidasCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"Issue a Verifiable Credential containing attributes from your A.M.K.A registery\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"Once you have authenticated through the required data sources, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, amkaLoginButton), __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.sealSession,\n      card: eidasCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAmkaToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n    setEidasRedirect: uri => {\n      dispatch(setEidasRedirectUri(uri));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueAmka);","map":{"version":3,"sources":["/home/ni/code/js/sbchain-issuer/pages/vc/issue/amka.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","completeDIDAuth","makeSealSession","makeSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","ConnectMobile","IssueVCButton","PairOrCard","isMobile","transport","require","IssueAmka","Component","constructor","props","dispatch","isFetching","sessionData","proceedWithAmkaAuth","bind","hasRequiredAttributes","undefined","amka","getInitialProps","reduxStore","req","userSessionData","DIDOk","sealSession","session","userData","enpoint","baseUrl","DID","console","log","getState","qrData","vcSent","componentDidMount","toSelect","setAmkaToSelection","startSessionAndDidAuth","makeConnectionRequest","sessionFrag","window","location","href","render","stepNumber","stepperSteps","title","uuid","amkaLoginButton","issueVCBut","userSelection","eidasCard","marginTop","result","mapStateToProps","state","appReducer","fetching","eidasUri","eidasPort","endpoint","eidasRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","didAuthOK","startSealSession","setTheSealSession","sessionId","setEidas","uri","data","setEidasRedirect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  // setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport ConnectMobile from \"../../../components/ConnectMobile\"\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueAmka extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.proceedWithAmkaAuth = this.proceedWithAmkaAuth.bind(this);\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.amka !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n\n      console.log(\n        `eidas.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n      // reduxStore.dispatch(setEidasUriPort(req.eidasUri, req.eidasPort));\n      // reduxStore.dispatch(setEidasRedirectUri(req.eidasRedirectUri))\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n        // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.amka) {\n      let toSelect = [this.props.sessionData.amka];\n      this.props.setAmkaToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          isMobile()\n        );\n      }\n    }\n  }\n\n \n  proceedWithAmkaAuth() {\n    let sessionFrag = this.props.sealSession?`?session=${this.props.sealSession}`:'';\n    window.location.href = this.props.baseUrl?`${this.props.baseUrl}amka/amka-authenticate${sessionFrag}`:`${this.props.baseUrl}/amka/amka-authenticate${sessionFrag}`;\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: 'Authenticate over \"A.M.K.A Check Service\"' },\n      { title: \"Request Issuance\" },\n    ];\n    \n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.uuid}\n            sealSession={this.props.uuid}\n          />\n        </Layout>\n      );\n    }\n\n    let amkaLoginButton = !this.hasRequiredAttributes ? (\n      <Button onClick={this.proceedWithAmkaAuth}>A.M.K.A</Button>\n    ) : (\n      <Button variant=\"primary\" disabled>\n        A.M.K.A\n      </Button>\n    );\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={this.hasRequiredAttributes}\n        // vcIssuanceEndpoint={\"/issueVCSecure\"}\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"AMKA\"}\n      />\n    );\n\n    let eidasCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>Issue a Verifiable Credential containing attributes from your A.M.K.A registery</Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Once you have authenticated through the required data sources, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{amkaLoginButton}</Col>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n        {/* <Card.Footer className=\"text-muted\">2 days ago</Card.Footer> */}\n      </Card>\n    );\n   \n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.sealSession}\n        card={eidasCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setAmkaToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n    setEidas: (uri, data) => {\n      dispatch(setEidasUriPort(uri, data));\n    },\n\n    setEidasRedirect: (uri) => {\n      dispatch(setEidasRedirectUri(uri));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueAmka);\n"]},"metadata":{},"sourceType":"module"}