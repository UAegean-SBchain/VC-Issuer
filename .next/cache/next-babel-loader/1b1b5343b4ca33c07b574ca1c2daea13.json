{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nclass SSE extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.session = props.session;\n  }\n\n  componentDidMount() {\n    this.eventSource = new EventSource(`/events`); //listening for \"event\" type events\n    // as set by the server at ::  res.write(`event: event\\n`);\n\n    this.eventSource.addEventListener(\"event\", evt => {\n      const data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n      // Use data here\n\n      let eventData = JSON.parse(data);\n\n      if (eventData.sessionId && this.props.serverSessionId) {\n        console.log(`SSE.js -- componentDidMount:: got ${eventData.sessionId} and the current session id is ${this.props.serverSessionId}`); // alert(`my session id is ${this.props.serverSessionId}`)\n        // alert(`received is ${eventData.sessionId}`)\n\n        if (eventData.sessionId === this.props.serverSessionId) {\n          console.log(`SSE.js -- componentDidMount:: sessionsMatch!!`);\n          console.log(`SSE.js -- componentDidMount:: uuid: ${eventData.uuid}`); // alert(`DID auth was ok!!!`)\n\n          this.props.didAuthOK(eventData.uuid, this.props.sealSession);\n        }\n      } // if there is no current session in the client\n      // and the server sends a new session event\n\n\n      if (!this.props.uuid) {\n        console.log(\" no active session found!\");\n      } else {\n        console.log(`SSE.js:: found uuid ${this.props.uuid}`);\n        console.log(`SSE.js:: sent status ${eventData.status}`); //check if event is about this client\n\n        if (this.props.uuid === eventData.uuid) {\n          switch (eventData.status) {\n            case \"sent\":\n              console.log(\"SSE.js:: VC sent to user\");\n              this.props.vcSent();\n              return \"\";\n\n            default:\n              console.log(\"SSE.js:: default\");\n          }\n        } else {\n          console.log(`SSE.js:: the uuid is about ${eventData.uuid} but i have ${this.props.uuid}`);\n        }\n      }\n    }, false);\n  }\n\n  render() {\n    return __jsx(\"div\", null);\n  } //..render...\n\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    vcSent: () => {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: (uuid, sealSession) => {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);","map":{"version":3,"sources":["/home/ni/code/js/sbchain-issuer/components/Sse.js"],"names":["React","connect","vcSentToUser","completeDIDAuth","SSE","Component","constructor","props","dispatch","session","componentDidMount","eventSource","EventSource","addEventListener","evt","data","JSON","parse","eventData","sessionId","serverSessionId","console","log","uuid","didAuthOK","sealSession","status","vcSent","render","mapStateToProps","state","serverSession","sessionStatus","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { vcSentToUser, completeDIDAuth } from \"../store\";\n\nclass SSE extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.session = props.session;\n  }\n\n  componentDidMount() {\n    this.eventSource = new EventSource(`/events`);\n    //listening for \"event\" type events\n    // as set by the server at ::  res.write(`event: event\\n`);\n\n    this.eventSource.addEventListener(\n      \"event\",\n      evt => {\n        \n        const data = JSON.parse(evt.data); //returns a string so needs further parsing into a JSON\n        // Use data here\n        let eventData = JSON.parse(data);\n        if (eventData.sessionId && this.props.serverSessionId) {\n          console.log(\n            `SSE.js -- componentDidMount:: got ${eventData.sessionId} and the current session id is ${this.props.serverSessionId}`\n          );\n          // alert(`my session id is ${this.props.serverSessionId}`)\n          // alert(`received is ${eventData.sessionId}`)\n          if (eventData.sessionId === this.props.serverSessionId) {\n            console.log(`SSE.js -- componentDidMount:: sessionsMatch!!`);\n            console.log(\n              `SSE.js -- componentDidMount:: uuid: ${eventData.uuid}`\n            );\n            // alert(`DID auth was ok!!!`)\n            this.props.didAuthOK(eventData.uuid, this.props.sealSession);\n          }\n        }\n\n        // if there is no current session in the client\n        // and the server sends a new session event\n        if (!this.props.uuid) {\n          console.log(\" no active session found!\");\n        } else {\n          console.log(`SSE.js:: found uuid ${this.props.uuid}`);\n          console.log(`SSE.js:: sent status ${eventData.status}`);\n          //check if event is about this client\n          if (this.props.uuid === eventData.uuid) {\n            switch (eventData.status) {\n              case \"sent\":\n                console.log(\"SSE.js:: VC sent to user\");\n                this.props.vcSent();\n                return \"\";\n              default:\n                console.log(\"SSE.js:: default\");\n            }\n          } else {\n            console.log(\n              `SSE.js:: the uuid is about ${eventData.uuid} but i have ${this.props.uuid}`\n            );\n          }\n        }\n      },\n      false\n    );\n  }\n\n  render() {\n    return <div></div>;\n  }\n\n  //..render...\n}\n\nfunction mapStateToProps(state) {\n  return {\n    session: state.serverSession,\n    status: state.sessionStatus\n    // serverSessionId: state.serverSessionId,\n    // endpoint: state.endpoint\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    vcSent: () => {\n      dispatch(vcSentToUser());\n    },\n    didAuthOK: (uuid, sealSession) => {\n      dispatch(completeDIDAuth(uuid, sealSession));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SSE);\n"]},"metadata":{},"sourceType":"module"}