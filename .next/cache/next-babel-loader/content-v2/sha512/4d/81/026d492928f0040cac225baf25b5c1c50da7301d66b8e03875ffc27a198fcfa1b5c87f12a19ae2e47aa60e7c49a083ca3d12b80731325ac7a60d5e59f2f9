{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport axios from \"axios\";\nimport UserSelection from \"./model/userSelection\";\nimport session from \"express-session\";\nconst initialState = {\n  count: 0,\n  qrData: null,\n  fetching: false,\n  requestSignature: null,\n  sessionData: null,\n  serverSessionId: null,\n  uuid: null,\n  vcSent: false,\n  userSelection: [],\n  // the attributes selected by the user to be included in a VC,\n  endpoint: null,\n  // the backend server url root.\n  cardIndex: 1,\n  stepperSteps: [],\n  baseUrl: \"\",\n  DID: false,\n  //boolean, denoting that DID connection response has been received for this session\n  sealSession: \"\",\n  didAuthCallback: \"\",\n  // callback address set by the caller to redirect to after DID auth,\n  eidasUri: \"\",\n  eidasPort: \"\",\n  eidasRedirectUri: \"\",\n  unauthorized: false,\n  vcType: \"\",\n  registeredEmail: null,\n  registrationFinished: false,\n  users: [],\n  endorsement: null\n};\nexport const actionTypes = {\n  GET_QR_AUTH_RESPONSE: \"GET_QR_AUTH_RESPONSE\",\n  MAKE_QR_AUTH_REQUEST: \"MAKE_QR_AUTH_REQUEST\",\n  MAKE_VC_QR_REQUEST: \"MAKE_VC_QR_REQUEST\",\n  //make a request to generate a VC based on the selected attributes\n  GET_VC_QR_RESPONSE: \"GET_VC_QR_REQUEST\",\n  SET_ATTRIBUTES_SELECTION: \"SET_ATTRIBUTES_SELECTION\",\n  //adds an array as the user  selected attirubtes\n  ADD_SET_TO_ATTRIBUTES_SELECTION: \"ADD_SET_TO_ATTRIBUTES_SELECTION\",\n  //adds the payload to the userSelection\n  ADD_ATTRIBUTES_TO_SELECTION: \"ADD_ATTRIBUTES_TO_SELECTION\",\n  //adds the payload to the userSelection\n  // the selection takes place using identifiers from the session\n  // that are meaningful to the backend\n  REMOVE_ATTRIBUTE_FROM_SELECTION: \"REMOVE_ATTRIBUTE_FROM_SELECTION\",\n  SET_SERVER_SESSION_DATA: \"SET_SERVER_SESSION_DATA\",\n  SET_SERVER_SESSION_ID: \"SET_SERVER_SESSION_ID\",\n  VC_SENT_TO_USER: \"VC_SENT_TO_USER\",\n  SET_ENDPOINT: \"SET_END_POINT\",\n  //\n  INCREASE_CARD_INDEX: \"INCREASE_CARD_INDEX\",\n  DECREASE_CARD_INDEX: \"DECREASE_CARD_INDEX\",\n  //\n  SET_STEPPER_STEPS: \"SET_STEPPER_STEPS\",\n  //\n  SET_BASE_URL: \"SET_BASE_URL\",\n  //\n  SET_DID_TRUE: \"SES_DID_TRUE\",\n  SET_SEAL_SESSION: \"SET_SEAL_SESSION\",\n  SET_CALLBACK: \"SET_CALLBACK\",\n  SET_EIDAS_URI_PORT: \"SET_EIDAS_URI_PORT\",\n  SET_EIDAS_REDIRECT_URI: \"SET_EIDAS_REDIRECT_URI\",\n  //\n  SET_UNAUTHORIZED: \"SET_UNAUTHORIZED\",\n  //\n  SET_REGISTRATION_VC_TYPE: \"SET_REGISTRATION_VC_TYPE\",\n  SET_REGISTRATION_EMAIL: \"SET_REGISTRATION_EMAIL\",\n  SET_REGISTRATION_FINISHED: \"SET_REGISTRATION_FINISHED\",\n  SET_USERS: \"SET_USERS\",\n  SET_ENDORSEMENT: \"SET_ENDORSEMENT\"\n}; // REDUCERS\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_ENDORSEMENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        endorsement: action.data\n      });\n\n    case actionTypes.SET_USERS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        users: action.data\n      });\n\n    case actionTypes.SET_REGISTRATION_EMAIL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        registeredEmail: action.data\n      });\n\n    case actionTypes.SET_REGISTRATION_FINISHED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        registrationFinished: action.data\n      });\n\n    case actionTypes.SET_REGISTRATION_VC_TYPE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        vcType: action.data\n      });\n\n    case actionTypes.SET_UNAUTHORIZED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        unauthorized: action.data\n      });\n\n    case actionTypes.SET_EIDAS_REDIRECT_URI:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        eidasRedirectUri: action.data\n      });\n\n    case actionTypes.SET_EIDAS_URI_PORT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        eidasUri: action.data.uri,\n        eidasPort: action.data.port\n      });\n\n    case actionTypes.SET_CALLBACK:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        didAuthCallback: action.data\n      });\n\n    case actionTypes.SET_SEAL_SESSION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sealSession: action.data\n      });\n\n    case actionTypes.SET_DID_TRUE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        DID: true,\n        uuid: action.data\n      });\n\n    case actionTypes.SET_BASE_URL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        baseUrl: action.data\n      });\n\n    case actionTypes.SET_STEPPER_STEPS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stepperSteps: action.data\n      });\n\n    case actionTypes.INCREASE_CARD_INDEX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cardIndex: state.cardIndex + 1\n      });\n\n    case actionTypes.DECREASE_CARD_INDEX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cardIndex: state.cardIndex - 1\n      });\n\n    case actionTypes.SET_ENDPOINT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        endpoint: action.data\n      });\n\n    case actionTypes.VC_SENT_TO_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        vcSent: true\n      });\n\n    case actionTypes.SET_SERVER_SESSION_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sessionData: action.data // userEduGain: action.data.eduGAIN,\n        // userEidas: action.data.eidas,\n\n      });\n\n    case actionTypes.GET_QR_AUTH_RESPONSE:\n      // console.log(action.data);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetching: false,\n        qrData: action.data.qr,\n        uuid: action.data.uuid,\n        requestSignature: action.data.signature\n      });\n\n    case actionTypes.SET_ATTRIBUTES_SELECTION:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userSelection: action.data\n      });\n\n    case actionTypes.MAKE_QR_AUTH_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fetching: true,\n        vcSent: false\n      });\n\n    case actionTypes.ADD_ATTRIBUTES_TO_SELECTION:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userSelection: [...state.userSelection, action.data]\n        });\n      }\n\n    case actionTypes.ADD_SET_TO_ATTRIBUTES_SELECTION:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          userSelection: [...state.userSelection, ...action.data]\n        });\n      }\n\n    case actionTypes.SET_SERVER_SESSION_ID:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          serverSessionId: action.data\n        });\n      }\n\n    case actionTypes.REMOVE_ATTRIBUTE_FROM_SELECTION:\n      let newSelection = [...state.userSelection.filter((el, ind) => {\n        return ind !== action.index;\n      })];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userSelection: newSelection\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\n\nexport function loginClicked() {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    axios.get(\"connectionRequest\").then(data => {\n      console.log(\"got the data form the server\");\n      console.log(data.data);\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data\n      });\n    });\n  }; // return dispatch => axios.get('https://38da089e.ngrok.io/connectionRequest')\n  //     .then(({ data }) => data)\n  //     .then(items => dispatch({ type: actionTypes.MAKE_QR_AUTH_REQUEST, items }))\n  //     .then( () =>{\n  //       console.log(\"got there\")\n  //         return dispatch({ type: actionTypes.GET_QR_AUTH_RESPONSE, data:'these are my awesome data' })\n  //     });\n} // export function setDIDTrue() {\n//   return dispatch => {\n//     dispatch({\n//       type: actionTypes.SET_DID_TRUE\n//     });\n//   };\n// }\n\nexport function setStepperSteps(steps) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_STEPPER_STEPS,\n      data: steps\n    });\n  };\n}\nexport function setBaseUrl(baseUrl) {\n  return dispatch => {\n    console.log(\"setting baseurl to\" + baseUrl);\n    dispatch({\n      type: actionTypes.SET_BASE_URL,\n      data: baseUrl\n    });\n  };\n}\nexport function startSession(sessionId, sessionStatus) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.START_SESSION,\n      data: {\n        sessionId: sessionId,\n        status: sessionStatus\n      }\n    });\n  };\n}\nexport function setServerSessionId(sessionId) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_SERVER_SESSION_ID,\n      data: sessionId\n    });\n  };\n}\nexport function setSessionData(sessionData) {\n  return dispatch => {\n    console.log(`store.js setSessionData called with::`);\n    console.log(sessionData);\n    dispatch({\n      type: actionTypes.SET_SERVER_SESSION_DATA,\n      data: sessionData\n    });\n  };\n}\nexport function setUserAttributeSelection(selectedAttributes) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_ATTRIBUTES_SELECTION,\n      data: selectedAttributes\n    });\n  };\n}\nexport function updateSession(sessionStatus) {\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.UPDATE_SESSION,\n      data: {\n        status: sessionStatus\n      }\n    };\n    dispatch(toDispatch);\n  };\n}\nexport function setEndpoint(endpoint) {\n  console.log(`store.js set endpoint to ${endpoint}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.SET_ENDPOINT,\n      data: endpoint\n    };\n    dispatch(toDispatch);\n  };\n}\nexport function addToSelection(index, source) {\n  // console.log(`store.js:: will add to seleciton ${index} , ${source}`);\n  const data = new UserSelection(index, source);\n  return dispatch => {\n    dispatch({\n      type: actionTypes.ADD_ATTRIBUTES_TO_SELECTION,\n      data: data\n    });\n  };\n}\nexport function addSetToSelection(setArray) {\n  const data = [];\n  setArray.forEach(attrObj => {\n    Object.keys(attrObj).map(key => {\n      // console.log(`will fetch key ${key} from` )\n      data.push(new UserSelection(key, attrObj.source));\n      return new UserSelection(key, attrObj[key]);\n    });\n  });\n  return dispatch => {\n    dispatch({\n      type: actionTypes.ADD_SET_TO_ATTRIBUTES_SELECTION,\n      data: data\n    });\n  };\n}\nexport function removeFromSelection(index) {\n  // console.log(`store.js will remove from  seleciton ${index}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.REMOVE_ATTRIBUTE_FROM_SELECTION,\n      index: index\n    };\n    dispatch(toDispatch);\n  };\n}\nexport function vcSentToUser() {\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.VC_SENT_TO_USER\n    };\n    dispatch(toDispatch);\n  };\n}\nexport function increaseCardIndex() {\n  // console.log(`store.js will remove from  seleciton ${index}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.INCREASE_CARD_INDEX\n    };\n    dispatch(toDispatch);\n  };\n}\nexport function decreaseCardIndex() {\n  // console.log(`store.js will remove from  seleciton ${index}`);\n  return dispatch => {\n    let toDispatch = {\n      type: actionTypes.DECREASE_CARD_INDEX\n    };\n    dispatch(toDispatch);\n  };\n}\nexport function requestVCgeneration(url, selectedAttributes, vcType, isMobile = false) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    let bodyFormData = new FormData();\n    bodyFormData.set(\"data\", selectedAttributes);\n    console.log(\"store.js - requestVCgeneration:: will make VC generation request\");\n    console.log(`store.js - requestVCgeneration:: for the url ${url}`); // console.log(`store.js - requestVCgeneration:: with data`)\n    // console.log(selectedAttributes);\n    // console.log(isMobile);\n\n    axios.post(url, {\n      data: selectedAttributes,\n      vcType: vcType,\n      isMobile: isMobile\n    }).then(data => {\n      console.log(\"store.js- requestVCgeneration:: got the data form the server\");\n      console.log(data.data);\n      console.log(\"store.js- requestVCgeneration:: got vcType\");\n      console.log(vcType);\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data,\n        vcType: vcType\n      });\n    });\n  };\n}\nexport function makeConnectionRequest() {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    axios.post(\"/makeConnectionRequest\", {}).then(data => {\n      console.log(\"store.js:: makeConnectionRequest got the data form the server\");\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data\n      });\n    });\n  };\n}\nexport function completeDIDAuth(uuid) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_DID_TRUE,\n      data: uuid\n    });\n  };\n}\nexport function makeAndPushVC(url, selectedAttributes, vcType, sealSession, isMobile = false, caseId = undefined) {\n  return dispatch => {\n    let bodyFormData = new FormData();\n    bodyFormData.set(\"data\", selectedAttributes);\n    console.log(\"store.js - makeAndPushVC:: will make VC generation request with attributes\");\n    console.log(selectedAttributes);\n    let postBody = {\n      data: selectedAttributes,\n      sealSession: sealSession,\n      vcType: vcType,\n      isMobile: isMobile\n    };\n\n    if (caseId) {\n      postBody.caseId = caseId;\n    }\n\n    axios.post(url, postBody).then(data => {\n      console.log(\"store.js- makeAndPushVC:: got the data form the server\");\n      dispatch({\n        type: actionTypes.VC_SENT_TO_USER\n      });\n    }).catch(err => {\n      console.log(err);\n      dispatch({\n        type: actionTypes.SET_UNAUTHORIZED,\n        data: true\n      });\n    }); //TODO add here an action denoting that the VC was sent\n  };\n}\nexport function setSealSession(sessionId) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_SEAL_SESSION,\n      data: sessionId\n    });\n  };\n}\nexport function makeSealSession(baseUrl) {\n  console.log(\"store:: makeSealSession\");\n  return dispatch => {\n    axios.post(`${baseUrl}vc/start-session`, {}).then(resp => {\n      console.log(\"store.js:: makeSealSession\"); // console.log(resp.data);\n\n      return dispatch({\n        type: actionTypes.SET_SEAL_SESSION,\n        data: resp.data\n      });\n    });\n  };\n}\nexport function makeOnlyConnectionRequest(sealSession, baseUrl, isMobile) {\n  let postData = {\n    sealSession: sealSession\n  };\n\n  if (isMobile) {\n    postData.isMobile = isMobile;\n  }\n\n  return dispatch => {\n    console.log(`makeOnlyConnectionRequest ${setSealSession}, ${baseUrl}, ${isMobile}`);\n    dispatch({\n      type: actionTypes.MAKE_QR_AUTH_REQUEST\n    });\n    let url = baseUrl && baseUrl != \"\" ? `${baseUrl}onlyConnectionRequest` : \"/onlyConnectionRequest\";\n    console.log(`the url is ${url}`);\n    axios.post(url, postData).then(data => {\n      console.log(\"store.js -- onlyConnectionRequest:: got the data form the server\");\n      return dispatch({\n        type: actionTypes.GET_QR_AUTH_RESPONSE,\n        data: data.data\n      });\n    });\n  };\n}\nexport function makeSessionWithDIDConnecetionRequest(baseUrl, isMobile) {\n  console.log(\"store:: makeSessionWithDIDConnecetionRequest***\");\n  let sessionId = \"\";\n  return dispatch => {\n    let url = baseUrl && baseUrl !== \"\" ? `${baseUrl}vc/start-session` : `/vc/start-session`;\n    console.log(`store:: makeSessionWithDIDConnecetionRequest*** -- posting ${url}`);\n    axios.post(url, {}).then(resp => {\n      sessionId = resp.data.sId;\n      console.log(`store:: makeSessionWithDIDConnecetionRequest*** -- response with sessionId`);\n      console.log(`the response is `);\n      console.log(resp);\n      console.log(`and the session id is `);\n      console.log(sessionId);\n      return dispatch({\n        type: actionTypes.SET_SEAL_SESSION,\n        data: sessionId\n      });\n    }).then(obj => {\n      let url = baseUrl && baseUrl !== \"\" ? `${baseUrl}onlyConnectionRequest` : `/onlyConnectionRequest`;\n      console.log(`isMobile? ${isMobile} and the session is ${sessionId}`);\n      console.log(sessionId);\n      console.log(`store:: makeSessionWithDIDConnecetionRequest*** posting to ${url} with isMobile ${isMobile} nad sessionId ${sessionId}`);\n      axios.post(url, {\n        sealSession: sessionId,\n        baseUrl: baseUrl,\n        isMobile: isMobile\n      }).then(data => {\n        return dispatch({\n          type: actionTypes.GET_QR_AUTH_RESPONSE,\n          data: data.data\n        });\n      });\n    });\n  };\n}\nexport function setDidCallback(callback) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_CALLBACK,\n      data: callback\n    });\n  };\n}\nexport function setEidasUriPort(uri, port) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_EIDAS_URI_PORT,\n      data: {\n        uri: uri,\n        port: port\n      }\n    });\n  };\n}\nexport function setEidasRedirectUri(uri) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_EIDAS_REDIRECT_URI,\n      data: uri\n    });\n  };\n}\nexport function setUnauthorized(value) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_UNAUTHORIZED,\n      data: value\n    });\n  };\n}\nexport function setRegistrationVCType(value) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_REGISTRATION_VC_TYPE,\n      data: value\n    });\n  };\n}\nexport function setRegistrationEmail(value) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_REGISTRATION_EMAIL,\n      data: value\n    });\n  };\n}\nexport function setRegistrationFinished(value) {\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_REGISTRATION_FINISHED,\n      data: value\n    });\n  };\n}\nexport function setUsers(users) {\n  console.log(`store.js setting users to`);\n  console.log(users);\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_USERS,\n      data: users\n    });\n  };\n}\nexport function setEndorsement(endorsement) {\n  console.log(`store.js setEndorsement called`);\n  return dispatch => {\n    dispatch({\n      type: actionTypes.SET_ENDORSEMENT,\n      data: endorsement\n    });\n  };\n}\nconst rootReducer = combineReducers({\n  // ...your other reducers here\n  // you have to pass formReducer under 'form' key,\n  // for custom keys look up the docs for 'getFormState'\n  appReducer: reducer,\n  form: formReducer\n});\nexport const initializeStore = (preloadedState = initialState) => {\n  return createStore(rootReducer, preloadedState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":null,"metadata":{},"sourceType":"module"}