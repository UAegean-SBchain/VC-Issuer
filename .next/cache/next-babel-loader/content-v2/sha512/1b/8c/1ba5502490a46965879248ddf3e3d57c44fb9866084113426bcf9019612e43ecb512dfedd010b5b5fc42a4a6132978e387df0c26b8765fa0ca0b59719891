{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Container, Row, Col, Card, ListGroup, InputGroup } from \"react-bootstrap\";\n\nconst AttributeCards = props => {\n  // console.log(`attributecards.js`);\n  // console.log(props);\n  let attributeSources = props.sources;\n  let maxPerRow = 2;\n  let index = 0;\n  let attributeSourcesRow = attributeSources.reduce((initVal, attribute) => {\n    if (initVal[index] === undefined) initVal[index] = [];\n\n    if (initVal[index].length < maxPerRow) {\n      initVal[index].push(attribute);\n    } else {\n      // console.log(`will add  new row`);\n      index++;\n      initVal[index] = [];\n      initVal[index].push(attribute);\n    }\n\n    return initVal;\n  }, []); //each row has two elements\n\n  let keyIds = 0;\n  let rows = attributeSourcesRow.map(attrRow => {\n    keyIds++;\n    let internalRow = attrRow.map(attr => {\n      let properties = [];\n\n      if (attr) {\n        for (const [key, value] of Object.entries(attr)) {\n          // console.log(`attribute ${key} with index ${index}`)\n          let match = props.userSelection.find(sel => {\n            return attr.source === sel.source && key === sel.key;\n          }); // console.log(`match for ${key} is ${match}`)\n\n          let rowStyle = match ? {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n            fontWeight: \"bold\"\n          } : {};\n          let checked = match ? true : false;\n          if (key !== \"source\" && key !== \"loa\") properties.push(__jsx(Container, {\n            key: key\n          }, __jsx(ListGroup.Item, {\n            key: key,\n            style: rowStyle\n          }, __jsx(Row, null, __jsx(Col, {\n            xs: 6,\n            key: key,\n            style: {\n              fontSize: \"smaller\"\n            }\n          }, key, \" :\"), __jsx(Col, {\n            xs: 4,\n            key: value,\n            style: {\n              fontSize: \"smaller\"\n            }\n          }, value), __jsx(Col, {\n            xs: 2,\n            style: {\n              float: \"right\"\n            },\n            key: \"select\"\n          }, __jsx(InputGroup.Append, {\n            className: \"floatRight\",\n            style: {\n              float: \"right!important\"\n            }\n          }, __jsx(InputGroup.Checkbox, {\n            \"aria-label\": \"Checkbox for selecting a single attribute\",\n            onChange: () => {\n              props.clickCheckbox(key, attr.source);\n            },\n            checked: checked\n          })), __jsx(_JSXStyle, {\n            id: \"1818926957\"\n          }, [\".floatRight{float:right;}\"]))))));\n          index++;\n        }\n      }\n\n      return __jsx(Col, {\n        xs: 6,\n        key: attr.source,\n        style: {\n          marginBottom: \"1rem\"\n        }\n      }, __jsx(Card, null, __jsx(Card.Body, null, __jsx(Card.Title, null, __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n        key: \"checkBox\",\n        style: {\n          maxWidth: \"10%\"\n        }\n      }, __jsx(InputGroup.Prepend, null, __jsx(InputGroup.Checkbox, {\n        \"aria-label\": \"Checkbox for selecting all attributes\",\n        onChange: () => {\n          props.clickedCardCheckBox(attr.source);\n        }\n      }))), __jsx(Col, {\n        key: \"name\",\n        style: {\n          maxWidth: \"90%\"\n        },\n        className: \"text-align-center\"\n      }, attr.source), __jsx(_JSXStyle, {\n        id: \"3877931395\"\n      }, [\".text-align-center{text-align:center;}\"])))), __jsx(Card.Subtitle, {\n        className: \"mb-2 text-muted\"\n      }, \"Attributes retrieved from \", attr.source), __jsx(ListGroup, {\n        variant: \"flush\"\n      }, properties))));\n    });\n    return __jsx(Row, {\n      key: keyIds\n    }, \" \", internalRow, \" \");\n  });\n  return __jsx(Container, {\n    style: {\n      marginTop: \"2rem\"\n    }\n  }, rows);\n};\n\nexport default AttributeCards;","map":null,"metadata":{},"sourceType":"module"}