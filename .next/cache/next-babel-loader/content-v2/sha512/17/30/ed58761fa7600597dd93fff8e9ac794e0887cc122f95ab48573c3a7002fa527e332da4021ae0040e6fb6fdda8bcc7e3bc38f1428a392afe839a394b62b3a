{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport SelForm from \"../../../components/SelForm\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nclass IssueAmka extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submit\", values => {\n      // print the form values to the console\n      let valueAttributesNames = [\"oaedid\", \"hospitalized\", \"hospitalizedSpecific\", \"monk\", \"luxury\", \"none\", \"employed\"];\n      valueAttributesNames.forEach(name => {\n        if (!values[name]) {\n          values[name] = \"false\";\n        }\n      });\n      console.log(values); // values.loa = \"low\";\n\n      if (values.employed === 'false') {\n        values.employmentStatus = \"unemployed\";\n      } else {\n        values.employmentStatus = \"employed\";\n      }\n\n      values.source = \"self\";\n      let toSelect = [values];\n      this.props.setSefToSelection(toSelect);\n      axios.post(\"../../self/store\", {\n        session: this.props.sealSession,\n        details: values\n      }).then(data => {\n        console.log(\"updated backend with selection\");\n      }).then(response => {\n        this.props.setSelftToSession({\n          self: values\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.self !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl)); // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`self.js:: in the server the seal session is:: ${req.session.sealSession}`);\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession; // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.self) {\n      let toSelect = [this.props.sessionData.amka];\n      this.props.setSefToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, isMobile());\n      }\n    }\n  } // componentDidUpdate() {\n  //   if (this.props.sessionData && this.props.sessionData.self) {\n  //     let toSelect = [this.props.sessionData.self];\n  //     this.props.setSefToSelection(toSelect);\n  //   }\n  // }\n\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Συνδέστε το κινητό σας\"\n    }, {\n      title: 'Συμπληρώστε τα πεδία'\n    }, {\n      title: \"Έκδοση Ηλεκτρονικής Ταυτότητας\"\n    }];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.uuid,\n        sealSession: this.props.uuid\n      }));\n    }\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.self !== undefined,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"SELF\"\n    });\n\n    let selfCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"\\u0394\\u03B7\\u03BC\\u03B9\\u03BF\\u03C5\\u03C1\\u03B3\\u03B5\\u03AF\\u03C3\\u03C4\\u03B5 \\u03BC\\u03B9\\u03B1 \\u03B7\\u03BB\\u03B5\\u03BA\\u03C4\\u03C1\\u03BF\\u03BD\\u03B9\\u03BA\\u03AE \\u03C4\\u03B1\\u03C5\\u03C4\\u03CC\\u03C4\\u03B7\\u03C4\\u03B1 \\u03BC\\u03B5 \\u03C4\\u03B9\\u03C2 \\u03C0\\u03BB\\u03B7\\u03C1\\u03BF\\u03C6\\u03BF\\u03C1\\u03AF\\u03B5\\u03C2 \\u03C0\\u03BF\\u03C5 \\u03C0\\u03B1\\u03C1\\u03AD\\u03C7\\u03B5\\u03C4\\u03B5\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Η έκδοση της Ηλεκτρονικής σας Ταυτότητας είναι έτοιμη!\" : \"Παρακαλώ Συμπληρώστε τη κάτωθι δήλωση\"), __jsx(Card.Text, null, \"\\u039C\\u03BF\\u03BB\\u03B9\\u03C2 \\u03BF\\u03BB\\u03BF\\u03BA\\u03BB\\u03B7\\u03C1\\u03CE\\u03C3\\u03B5\\u03C4\\u03B5 \\u03C4\\u03B7\\u03BD \\u03B4\\u03AE\\u03BB\\u03C9\\u03C3\\u03B7 \\u03C4\\u03C9\\u03BD \\u03BA\\u03AC\\u03C4\\u03C9\\u03B8\\u03B9 \\u03C0\\u03B5\\u03B4\\u03AF\\u03C9\\u03BD, \\u03C0\\u03B1\\u03C4\\u03AE\\u03C3\\u03C4\\u03B5 \\u03C4\\u03BF \\u03BA\\u03BF\\u03C5\\u03BC\\u03C0\\u03AF \\\"\\u0388\\u03BA\\u03B4\\u03BF\\u03C3\\u03B7\\\" \\u03B3\\u03B9\\u03B1 \\u03BD\\u03B1 \\u03B4\\u03B7\\u03BC\\u03B9\\u03BF\\u03C5\\u03C1\\u03B3\\u03AE\\u03C3\\u03B5\\u03C4\\u03B5 \\u03C4\\u03B7\\u03BD \\u03C4\\u03B1\\u03C5\\u03C4\\u03BF\\u03C4\\u03B7\\u03C4\\u03AC \\u03C3\\u03B1\\u03C2.\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, issueVCBut)))));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.sealSession,\n      card: selfCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      formDataUploaded: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.self !== undefined,\n      selfForm: __jsx(SelForm, {\n        onSubmit: this.submit\n      })\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSelftToSession: userSessionData => {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueAmka);","map":null,"metadata":{},"sourceType":"module"}