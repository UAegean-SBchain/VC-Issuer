{"ast":null,"code":"var __jsx = React.createElement;\n// import { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { setUserAttributeSelection, setSessionData, addToSelection, addSetToSelection, removeFromSelection } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport AttributeCards from \"../components/AttributeCards\";\nimport { connect } from \"react-redux\";\nimport Link from \"next/link\";\nimport { Row, Button } from \"react-bootstrap\";\n\nclass SelectAttributes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.userEidas = props.userEidas;\n    this.userEduGain = props.userEduGain;\n    this.userSelection = props.userSelection;\n    this.clickedCheckbox = this.clickedCheckbox.bind(this);\n    this.clickedCardCheckBox = this.clickedCardCheckBox.bind(this);\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    const serverIsFetching = reduxStore.getState().fetching;\n    let userSessionData;\n\n    if (true) {\n      userSessionData = req.session.userData;\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } // console.log(userSessionData);\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setUserAttributeSelection([]));\n      reduxStore.dispatch(setSessionData(userSessionData));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      isFetching: serverIsFetching,\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dispatch,\n      sessionData\n    } = this.props; // console.log(`attribute-selector:: after mounting:`)\n    // console.log(this.props.userSelection)\n  }\n\n  componentWillUnmount() {}\n\n  clickedCheckbox(key, source) {\n    ////if element is already added remove from selection\n    console.log(`attribute-selector.js:: clickedCheckbox with ${key} ${source}`);\n    let match = this.props.userSelection.find(sel => {\n      return source === sel.source && key === sel.key;\n    });\n\n    if (match) {\n      console.log(`will remove from userSelection index ${this.props.userSelection.indexOf(match)}`);\n      this.props.onChangeRemoveFromSelection(this.props.userSelection.indexOf(match));\n    } else {\n      // console.log(`will add element of index ${index} and source ${source}`);\n      this.props.onChangeAddToSelection(key, source);\n    }\n  }\n\n  clickedCardCheckBox(source) {\n    console.log(`attribute-selector.js clicked cardCheckBox for source ${source}`);\n    let attributeSources = Object.keys(this.props.sessionData).map(key => {\n      // console.log(`will fetch key ${key} from` )\n      return this.props.sessionData[key];\n    });\n    console.log(attributeSources); // attributeSources.forEach\n\n    let toSelect = attributeSources.reduce((initVal, attributes) => {\n      console.log(`checking ${attributes.source} against ${source}`);\n\n      if (attributes.source === source) {\n        initVal.push(attributes);\n      }\n\n      return initVal;\n    }, []);\n    this.props.onChangeBigTickBox(toSelect);\n  }\n\n  render() {\n    // console.log(`sessionData`);\n    // console.log(this.props.sessionData);\n    let _sessionData = this.props.sessionData;\n\n    if (_sessionData) {\n      let attributeSourcesArray = Object.keys(_sessionData).map(key => {\n        // console.log(`will fetch key ${key} from` )\n        return _sessionData[key];\n      }); // console.log(`attributeSourcesArray`);\n      // console.log(attributeSourcesArray);\n\n      return __jsx(Layout, null, __jsx(AttributeCards, {\n        sources: attributeSourcesArray,\n        clickCheckbox: this.clickedCheckbox,\n        clickedCardCheckBox: this.clickedCardCheckBox,\n        userSelection: this.props.userSelection\n      }), __jsx(Row, null, __jsx(\"div\", {\n        className: \"col\"\n      }, __jsx(Link, {\n        href: \"/issue\"\n      }, __jsx(Button, {\n        variant: \"primary\",\n        className: \"float-right\"\n      }, \"Issue Verifiable Claim\")))));\n    } else {\n      return __jsx(Layout, null, __jsx(\"div\", null, \"No user attributes found\"));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection // the attributes selected by the user to be included in a VC\n\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChangeAddToSelection: (index, source) => {\n      dispatch(addToSelection(index, source));\n    },\n    onChangeRemoveFromSelection: index => {\n      dispatch(removeFromSelection(index));\n    },\n    onChangeBigTickBox: data => {\n      dispatch(addSetToSelection(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAttributes);","map":null,"metadata":{},"sourceType":"module"}