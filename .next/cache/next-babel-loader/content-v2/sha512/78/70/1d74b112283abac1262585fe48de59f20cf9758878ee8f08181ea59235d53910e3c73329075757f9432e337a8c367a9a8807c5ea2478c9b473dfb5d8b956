{"ast":null,"code":"import _regeneratorRuntime from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// import { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { setUserAttributeSelection, setSessionData, addToSelection, addSetToSelection, removeFromSelection } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport AttributeCards from \"../components/AttributeCards\";\nimport { connect } from \"react-redux\";\nimport Link from \"next/link\";\nimport { Row, Button } from \"react-bootstrap\";\n\nvar SelectAttributes = /*#__PURE__*/function (_React$Component) {\n  _inherits(SelectAttributes, _React$Component);\n\n  var _super = _createSuper(SelectAttributes);\n\n  function SelectAttributes(props) {\n    var _this;\n\n    _classCallCheck(this, SelectAttributes);\n\n    _this = _super.call(this, props);\n    _this.dispatch = props.dispatch;\n    _this.isFetching = props.isFetching;\n    _this.sessionData = props.sessionData;\n    _this.userEidas = props.userEidas;\n    _this.userEduGain = props.userEduGain;\n    _this.userSelection = props.userSelection;\n    _this.clickedCheckbox = _this.clickedCheckbox.bind(_assertThisInitialized(_this));\n    _this.clickedCardCheckBox = _this.clickedCardCheckBox.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SelectAttributes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          dispatch = _this$props.dispatch,\n          sessionData = _this$props.sessionData; // console.log(`attribute-selector:: after mounting:`)\n      // console.log(this.props.userSelection)\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"clickedCheckbox\",\n    value: function clickedCheckbox(key, source) {\n      ////if element is already added remove from selection\n      console.log(\"attribute-selector.js:: clickedCheckbox with \".concat(key, \" \").concat(source));\n      var match = this.props.userSelection.find(function (sel) {\n        return source === sel.source && key === sel.key;\n      });\n\n      if (match) {\n        console.log(\"will remove from userSelection index \".concat(this.props.userSelection.indexOf(match)));\n        this.props.onChangeRemoveFromSelection(this.props.userSelection.indexOf(match));\n      } else {\n        // console.log(`will add element of index ${index} and source ${source}`);\n        this.props.onChangeAddToSelection(key, source);\n      }\n    }\n  }, {\n    key: \"clickedCardCheckBox\",\n    value: function clickedCardCheckBox(source) {\n      var _this2 = this;\n\n      console.log(\"attribute-selector.js clicked cardCheckBox for source \".concat(source));\n      var attributeSources = Object.keys(this.props.sessionData).map(function (key) {\n        // console.log(`will fetch key ${key} from` )\n        return _this2.props.sessionData[key];\n      });\n      console.log(attributeSources); // attributeSources.forEach\n\n      var toSelect = attributeSources.reduce(function (initVal, attributes) {\n        console.log(\"checking \".concat(attributes.source, \" against \").concat(source));\n\n        if (attributes.source === source) {\n          initVal.push(attributes);\n        }\n\n        return initVal;\n      }, []);\n      this.props.onChangeBigTickBox(toSelect);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(`sessionData`);\n      // console.log(this.props.sessionData);\n      var _sessionData = this.props.sessionData;\n\n      if (_sessionData) {\n        var attributeSourcesArray = Object.keys(_sessionData).map(function (key) {\n          // console.log(`will fetch key ${key} from` )\n          return _sessionData[key];\n        }); // console.log(`attributeSourcesArray`);\n        // console.log(attributeSourcesArray);\n\n        return __jsx(Layout, null, __jsx(AttributeCards, {\n          sources: attributeSourcesArray,\n          clickCheckbox: this.clickedCheckbox,\n          clickedCardCheckBox: this.clickedCardCheckBox,\n          userSelection: this.props.userSelection\n        }), __jsx(Row, null, __jsx(\"div\", {\n          className: \"col\"\n        }, __jsx(Link, {\n          href: \"/issue\"\n        }, __jsx(Button, {\n          variant: \"primary\",\n          className: \"float-right\"\n        }, \"Issue Verifiable Claim\")))));\n      } else {\n        return __jsx(Layout, null, __jsx(\"div\", null, \"No user attributes found\"));\n      }\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var reduxStore, req, serverIsFetching, userSessionData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reduxStore = _ref.reduxStore, req = _ref.req;\n                serverIsFetching = reduxStore.getState().fetching;\n\n                if (false) {\n                  userSessionData = req.session.userData;\n                } else {\n                  if (reduxStore.getState().sessionData) {\n                    userSessionData = reduxStore.getState().sessionData;\n                  } else {\n                    console.log(\"no server session data found\");\n                  }\n                } // console.log(userSessionData);\n\n\n                if (userSessionData) {\n                  reduxStore.dispatch(setUserAttributeSelection([]));\n                  reduxStore.dispatch(setSessionData(userSessionData));\n                } //returned value here is getting mered with the mapstatetoprops\n                // mapstatetoprops overrides these values if they match\n\n\n                return _context.abrupt(\"return\", {\n                  isFetching: serverIsFetching,\n                  sessionData: userSessionData,\n                  qrData: reduxStore.getState().qrData\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return SelectAttributes;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.fetching,\n    qrData: state.qrData,\n    sessionData: state.sessionData,\n    userSelection: state.userSelection // the attributes selected by the user to be included in a VC\n\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onChangeAddToSelection: function onChangeAddToSelection(index, source) {\n      dispatch(addToSelection(index, source));\n    },\n    onChangeRemoveFromSelection: function onChangeRemoveFromSelection(index) {\n      dispatch(removeFromSelection(index));\n    },\n    onChangeBigTickBox: function onChangeBigTickBox(data) {\n      dispatch(addSetToSelection(data));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectAttributes);","map":null,"metadata":{},"sourceType":"module"}