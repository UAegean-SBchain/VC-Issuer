{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setStepperSteps, setEndpoint, setBaseUrl, setEndorsement, setSealSession } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport EndorsedEBillForm from \"../../../components/endorsedContactForm\";\n\nclass AuthorizeContact extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submit\", values => {\n      // console.log(values);\n      // console.log(`the session is ${this.props.sealSession}`)\n      let verificationId = values.verification; // console.log(``)\n      // let toSelect = [values];\n      // this.props.setSefToSelection(toSelect);\n\n      let uri = `/endorse/contact/authorization?verification=${verificationId}&session=${this.props.sealSession}`;\n      axios.get(uri).then(data => {\n        this.setState({\n          vcSent: true\n        });\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          error: true\n        });\n      });\n    });\n\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.contact !== undefined;\n    this.state = {\n      error: null,\n      vcSent: false\n    };\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let endorsement;\n    let sealSession;\n\n    if (true) {\n      endorsement = req.session.endorsement;\n      reduxStore.dispatch(setEndorsement(req.session.endorsement));\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      sealSession = req.session.sessionId;\n      reduxStore.dispatch(setSealSession(sealSession));\n    } else {\n      endorsement = reduxStore.getState().endorsement;\n      sealSession = reduxStore.getState().sealSession;\n    } //this way the userSessionData gets set in all settings\n\n\n    if (endorsement) {\n      reduxStore.dispatch(setEndorsement(endorsement));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      endorsement: endorsement,\n      sealSession: reduxStore.getState().sealSession // error: null,\n\n    };\n  }\n\n  render() {\n    let stepNumber = 0;\n    let stepperSteps = [{\n      title: \"Επιβεβαιώστε τα κάτωθι στοιχεία\"\n    } // { title: \"Declare Self Attested Attributes\" },\n    ];\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.contact !== undefined,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"CONTACT\"\n    });\n\n    let theCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"\\u0395\\u03C0\\u03B9\\u03B2\\u03B1\\u03B9\\u03B2\\u03AD\\u03C9\\u03C3\\u03B7 \\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03B5\\u03AF\\u03C9\\u03BD \\u03B3\\u03B9\\u03B1 \\u03AD\\u03BA\\u03B4\\u03BF\\u03C3\\u03B7 \\u03A0\\u03B9\\u03C3\\u03C4\\u03BF\\u03C0\\u03BF\\u03B9\\u03B7\\u03C4\\u03B9\\u03BA\\u03BF\\u03CD\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"\\u039F\\u03BB\\u03BF\\u03BA\\u03BB\\u03B7\\u03C1\\u03CE\\u03C3\\u03B1\\u03C4\\u03B5 \\u03C4\\u03B7\\u03BD \\u03B1\\u03AF\\u03C4\\u03B7\\u03C3\\u03B7 \\u03B5\\u03C0\\u03B9\\u03B2\\u03B1\\u03B9\\u03B2\\u03AD\\u03C9\\u03C3\\u03B7\\u03C2 \\u03C4\\u03C9\\u03BD \\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03B5\\u03AF\\u03C9\\u03BD \\u03C0\\u03BF\\u03C5 \\u03B4\\u03B7\\u03BB\\u03CE\\u03C3\\u03B1\\u03C4\\u03B5. \\u039C\\u03CC\\u03BB\\u03B9\\u03C2, \\u03C4\\u03B1 \\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03B5\\u03AF\\u03B1 \\u03B5\\u03C0\\u03B9\\u03B2\\u03B5\\u03B2\\u03B1\\u03B9\\u03C9\\u03B8\\u03BF\\u03CD\\u03BD \\u03B1\\u03C0\\u03CC \\u03C4\\u03BF\\u03BD \\u03B1\\u03C1\\u03BC\\u03CC\\u03B4\\u03B9\\u03BF \\u03C6\\u03BF\\u03C1\\u03AD\\u03B1, \\u03CC\\u03C0\\u03C9\\u03C2 \\u03B5\\u03C3\\u03B5\\u03AF\\u03C2 \\u03C4\\u03BF\\u03BD \\u03B4\\u03B7\\u03BB\\u03CE\\u03C3\\u03B1\\u03C4\\u03B5, \\u03C4\\u03BF \\u03B1\\u03BD\\u03C4\\u03AF\\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03BF \\u03C0\\u03B9\\u03C3\\u03C4\\u03BF\\u03C0\\u03BF\\u03B9\\u03B7\\u03C4\\u03B9\\u03BA\\u03CC (Verifiable Credential) \\u03B8\\u03B1 \\u03C3\\u03C4\\u03B1\\u03BB\\u03B5\\u03AF \\u03C3\\u03C4\\u03BF \\u03BA\\u03B9\\u03BD\\u03B7\\u03C4\\u03CC \\u03C3\\u03B1\\u03C2.\"), __jsx(Container, null)));\n\n    let result = this.state.error ? __jsx(\"div\", {\n      style: {\n        marginTop: \"3rem\"\n      }\n    }, \"\\u0397 \\u03C5\\u03C0\\u03B5\\u03CD\\u03B8\\u03C5\\u03BD\\u03B7 \\u03B4\\u03AE\\u03BB\\u03C9\\u03C3\\u03B7 \\u03C0\\u03BF\\u03C5 \\u03C0\\u03B1\\u03C1\\u03B5\\u03AF\\u03C7\\u03B1\\u03C4\\u03B5 \\u03B4\\u03B5\\u03BD \\u03C0\\u03B9\\u03C3\\u03C4\\u03BF\\u03C0\\u03BF\\u03B9\\u03B5\\u03AF \\u03C4\\u03B9\\u03C2 \\u03B6\\u03B7\\u03C4\\u03BF\\u03CD\\u03BC\\u03B5\\u03BD\\u03B5\\u03C2 \\u03B4\\u03B9\\u03B1\\u03C0\\u03B9\\u03C3\\u03C4\\u03B5\\u03CD\\u03C3\\u03B5\\u03B9\\u03C2\") : this.state.vcSent ? __jsx(\"div\", {\n      style: {\n        marginTop: \"3rem\"\n      }\n    }, \"\\u03A4\\u03BF \\u03B4\\u03B9\\u03B1\\u03C0\\u03B9\\u03C3\\u03C4\\u03B5\\u03C5\\u03C4\\u03AE\\u03C1\\u03B9\\u03BF\\u03BD \\u03AD\\u03C7\\u03B5\\u03B9 \\u03B1\\u03C0\\u03BF\\u03C3\\u03C4\\u03B1\\u03BB\\u03B5\\u03AF \\u03C3\\u03C4\\u03BF \\u03BA\\u03B9\\u03BD\\u03B7\\u03C4\\u03CC \\u03C4\\u03BF\\u03C5 \\u03C7\\u03C1\\u03AE\\u03C3\\u03C4\\u03B7 \\u03BC\\u03B5 \\u03B5\\u03C0\\u03B9\\u03C4\\u03C5\\u03C7\\u03AF\\u03B1\") : __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.sealSession,\n      card: theCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      formDataUploaded: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.contact !== undefined,\n      selfForm: __jsx(EndorsedEBillForm, {\n        onSubmit: this.submit,\n        endorsed: this.props.endorsement\n      })\n    });\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sessionData: state.appReducer.sessionData,\n    DID: true,\n    sealSession: state.appReducer.sealSession\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorizeContact);","map":null,"metadata":{},"sourceType":"module"}