{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { SubmissionError } from \"redux-form\";\nimport { makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setRegistrationVCType, setRegistrationEmail, setRegistrationFinished, setUsers } from \"../../store\";\nimport Layout from \"../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\"; // import ActiaveEndorserButton from \"../../components/ActivateEndorserButton\";\n\nimport ActivateEndorserButton from \"../../components/ActivateEndorserButton\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nclass RegisterEndorser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submit\", values => {\n      console.log(values);\n\n      if (!values.email) {\n        throw new SubmissionError({\n          email: \"email is required does not exist\",\n          _error: \"email is required!\"\n        });\n      }\n\n      if (!this.props.vcType) {\n        throw new SubmissionError({\n          vcType: \"Please select a VC type\",\n          _error: \"VC type is required!\"\n        });\n      } else {\n        axios.post(\"/register\", {\n          email: values.email,\n          vcType: this.props.vcType\n        }).then(data => {\n          console.log(\"registerd user\");\n          this.setRegFinished(true);\n        }).catch(err => {\n          console.log(\"an error occured during registration\");\n        });\n      }\n    });\n\n    this.dispatch = props.dispatch;\n    this.sessionData = props.sessionData;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let users;\n    let sealSession;\n\n    if (true) {\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl)); // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n\n      users = req.session.users;\n      reduxStore.dispatch(setUsers(users));\n      sealSession = req.session.sealSession;\n    } else {\n      users = reduxStore.getState().users; //if ther is sessionData then there should be a session as well\n\n      sealSession = reduxStore.getState().sealSession;\n    }\n\n    return {\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  render() {\n    const tableStyle = {\n      minWidth: \"650\",\n      marginTop: \"6rem\"\n    };\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(TableContainer, {\n      style: tableStyle,\n      component: Paper\n    }, __jsx(Table, {\n      \"aria-label\": \"simple table\"\n    }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Endorsers\"), __jsx(TableCell, {\n      align: \"right\"\n    }, \"Email\"), __jsx(TableCell, {\n      align: \"right\"\n    }, \"VcType\"), __jsx(TableCell, {\n      align: \"right\"\n    }, \"Verified\"), __jsx(TableCell, {\n      align: \"right\"\n    }, \"Status\"), __jsx(TableCell, {\n      align: \"right\"\n    }))), __jsx(TableBody, null, this.props.users.map(row => {\n      console.log(row);\n      console.log(row[\"vcType\"].reduce((total, current) => {\n        total + \" \" + current;\n      }, \"\"));\n      console.log(row[\"status\"]);\n      return __jsx(TableRow, {\n        key: row.email\n      }, __jsx(TableCell, {\n        component: \"th\",\n        scope: \"row\"\n      }, row.email), __jsx(TableCell, {\n        align: \"right\"\n      }, row.email), __jsx(TableCell, {\n        align: \"right\"\n      }, row[\"vcType\"].reduce((total, current) => {\n        return total + \"\\n\" + current;\n      }, \"\")), __jsx(TableCell, {\n        align: \"right\"\n      }, row.verified ? \"Verified\" : \"UnVerified\"), __jsx(TableCell, {\n        align: \"right\"\n      }, row[\"status\"] ? \"Active\" : \"InActive\"), __jsx(TableCell, {\n        align: \"right\"\n      }, \" \", __jsx(ActivateEndorserButton, {\n        active: row[\"status\"],\n        email: row.email,\n        users: this.props.users\n      })));\n    })))))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    sealSession: state.appReducer.sealSession,\n    endpoint: state.appReducer.endpoint,\n    users: state.appReducer.users\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSefToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    },\n    setVcType: vcType => {\n      dispatch(setRegistrationVCType(vcType));\n    },\n    setEmail: email => {\n      dispatch(setRegistrationEmail(email));\n    },\n    setRegFinished: finished => {\n      dispatch(setRegistrationFinished(finished));\n    },\n    setTheUsers: users => {\n      dispatch(setUsers(users));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterEndorser);","map":null,"metadata":{},"sourceType":"module"}