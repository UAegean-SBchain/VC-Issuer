{"ast":null,"code":"var __jsx = React.createElement;\n// import { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRedux } from \"../lib/redux\";\nimport { setEidas, setEdugain, setUserAttributeSelection } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport AttributeCards from \"../components/AttributeCards\";\n\nconst SelectAttributes = props => {\n  //   const router = useRouter();\n  let dispatch = useDispatch();\n  console.log(`selectAttributes props`);\n  console.log(props);\n  const eidas = useSelector(state => {\n    console.log(`userSelector. state`);\n    console.log(state);\n    return state.userEidas;\n  });\n  const eduGain = useSelector(state => state.userEduGain); //   dispatch(setEidas(userSessionData.eidas)); //add the userEidas data to the reduxstore to be able to get it from other componets as well\n  //   dispatch(setEdugain(userSessionData.eduGAIN)); //add the userEdugain data to the reduxstore to be able to get it from other componets as well\n  //   dispatch(setUserAttributeSelection([]));\n\n  if (props.sessionData && (props.sessionData.eidas || props.sessionData.eduGain)) {\n    return __jsx(Layout, null, __jsx(AttributeCards, {\n      sources: [props.sessionData.eidas, props.sessionData.eduGain]\n    }));\n  } else {\n    return __jsx(Layout, null, __jsx(\"div\", null, \"No user attributes found\"));\n  }\n};\n\nSelectAttributes.getInitialProps = async function ({\n  reduxStore,\n  req\n}) {\n  let userSessionData = null;\n\n  if (true) {\n    // we are running server side!\n    console.log(`running inside the server -- attribute-selector`); // get sessionData from session\n\n    console.log(`req.session`);\n    console.log(req.session);\n    userSessionData = req.session.userData;\n  } else {\n    console.log(`selectAttributes running inside the browser`);\n    console.log(`reduxStore is `); //state here did not contain the attributes!!!\n\n    console.log(reduxStore.getState());\n  } //returned value here is getting mered with the mapstatetoprops\n  // mapstatetoprops overrides these values if they match\n\n\n  if (userSessionData) {\n    return {\n      isFetching: reduxStore.getState().fetching,\n      sessionData: userSessionData,\n      userEidas: userSessionData.eidas,\n      userEduGain: userSessionData.edugain,\n      userSelection: userSessionData.userSelection,\n      qrData: reduxStore.getState().qrData\n    };\n  } else {\n    // if no userSessionData is set in server session\n    return {};\n  }\n};\n\nexport default withRedux(SelectAttributes);","map":null,"metadata":{},"sourceType":"module"}