{"ast":null,"code":"import _regeneratorRuntime from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n// import { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { withRedux } from \"../lib/redux\";\nimport { setEidas, setEdugain, setUserAttributeSelection } from \"../store\";\nimport Layout from \"../components/Layout\";\nimport AttributeCards from \"../components/AttributeCards\";\n\nvar SelectAttributes = function SelectAttributes(props) {\n  //   const router = useRouter();\n  var dispatch = useDispatch();\n  console.log(\"selectAttributes props\");\n  console.log(props);\n  var eidas = useSelector(function (state) {\n    console.log(\"userSelector. state\");\n    console.log(state);\n    return state.userEidas;\n  });\n  var eduGain = useSelector(function (state) {\n    return state.userEduGain;\n  }); //   dispatch(setEidas(userSessionData.eidas)); //add the userEidas data to the reduxstore to be able to get it from other componets as well\n  //   dispatch(setEdugain(userSessionData.eduGAIN)); //add the userEdugain data to the reduxstore to be able to get it from other componets as well\n  //   dispatch(setUserAttributeSelection([]));\n\n  if (props.sessionData && (props.sessionData.eidas || props.sessionData.eduGain)) {\n    return __jsx(Layout, null, __jsx(AttributeCards, {\n      sources: [props.sessionData.eidas, props.sessionData.eduGain]\n    }));\n  } else {\n    return __jsx(Layout, null, __jsx(\"div\", null, \"No user attributes found\"));\n  }\n};\n\nSelectAttributes.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var reduxStore, req, userSessionData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reduxStore = _ref.reduxStore, req = _ref.req;\n            userSessionData = null;\n\n            if (false) {\n              // we are running server side!\n              console.log(\"running inside the server -- attribute-selector\"); // get sessionData from session\n\n              console.log(\"req.session\");\n              console.log(req.session);\n              userSessionData = req.session.userData;\n            } else {\n              console.log(\"selectAttributes running inside the browser\");\n              console.log(\"reduxStore is \"); //state here did not contain the attributes!!!\n\n              console.log(reduxStore.getState());\n            } //returned value here is getting mered with the mapstatetoprops\n            // mapstatetoprops overrides these values if they match\n\n\n            if (!userSessionData) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              isFetching: reduxStore.getState().fetching,\n              sessionData: userSessionData,\n              userEidas: userSessionData.eidas,\n              userEduGain: userSessionData.edugain,\n              userSelection: userSessionData.userSelection,\n              qrData: reduxStore.getState().qrData\n            });\n\n          case 7:\n            return _context.abrupt(\"return\", {});\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default withRedux(SelectAttributes);","map":null,"metadata":{},"sourceType":"module"}