{"ast":null,"code":"import _regeneratorRuntime from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/home/ni/code/js/sbchain-issuer/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport SelForm from \"../../../components/SelForm\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\n\nvar transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nvar IssueAmka = /*#__PURE__*/function (_React$Component) {\n  _inherits(IssueAmka, _React$Component);\n\n  var _super = _createSuper(IssueAmka);\n\n  function IssueAmka(props) {\n    var _this;\n\n    _classCallCheck(this, IssueAmka);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"submit\", function (values) {\n      // print the form values to the console\n      var valueAttributesNames = [\"oaedid\", \"hospitalized\", \"hospitalizedSpecific\", \"monk\", \"luxury\", \"none\", \"employed\"];\n      valueAttributesNames.forEach(function (name) {\n        if (!values[name]) {\n          values[name] = \"false\";\n        }\n      });\n      console.log(values); // values.loa = \"low\";\n\n      if (values.employed) {\n        values.employmentStatus = \"employed\";\n      } else {\n        values.employmentStatus = \"unemployed\";\n      }\n\n      values.source = \"self\";\n      var toSelect = [values];\n\n      _this.props.setSefToSelection(toSelect);\n\n      axios.post(\"../../self/store\", {\n        session: _this.props.sealSession,\n        details: values\n      }).then(function (data) {\n        console.log(\"updated backend with selection\");\n      }).then(function (response) {\n        _this.props.setSelftToSession({\n          self: values\n        });\n      })[\"catch\"](function (error) {\n        console.log(error);\n      });\n    });\n\n    _this.dispatch = props.dispatch;\n    _this.isFetching = props.isFetching;\n    _this.sessionData = props.sessionData;\n    _this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.self !== undefined;\n    return _this;\n  }\n\n  _createClass(IssueAmka, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.sessionData && this.props.sessionData.self) {\n        var toSelect = [this.props.sessionData.amka];\n        this.props.setSefToSelection(toSelect);\n      }\n\n      if (!this.props.DID) {\n        //if DID auth has not been completed\n        if (!this.props.sealSession) {\n          this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n        } else {\n          this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, isMobile());\n        }\n      }\n    } // componentDidUpdate() {\n    //   if (this.props.sessionData && this.props.sessionData.self) {\n    //     let toSelect = [this.props.sessionData.self];\n    //     this.props.setSefToSelection(toSelect);\n    //   }\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n      var stepperSteps = [{\n        title: \"Pair your wallet\"\n      }, {\n        title: \"Declare Self Attested Attributes\"\n      }, {\n        title: \"Request Issuance\"\n      }];\n\n      if (this.props.qrData && isMobile() && !this.props.DID) {\n        return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n          steps: stepperSteps,\n          activeNum: stepNumber\n        }))), __jsx(ConnectMobile, {\n          baseUrl: this.props.baseUrl,\n          qrData: this.props.qrData,\n          DID: this.props.DID,\n          uuid: this.props.uuid,\n          serverSessionId: this.props.uuid,\n          sealSession: this.props.uuid\n        }));\n      }\n\n      var issueVCBut = __jsx(IssueVCButton, {\n        hasRequiredAttributes: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.self !== undefined,\n        baseUrl: this.props.baseUrl,\n        userSelection: this.props.userSelection,\n        uuid: this.props.sealSession,\n        vcType: \"SELF\"\n      });\n\n      var selfCard = __jsx(Card, {\n        className: \"text-center\",\n        style: {\n          marginTop: \"2rem\"\n        }\n      }, __jsx(Card.Header, null, \"Issue a Verifiable Credential containing self attested attributes\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"You have completed the self attestation of the required attributes, click the \\\"Issue\\\" button to generate and receive your VC .\"), __jsx(Container, null, __jsx(Row, null, __jsx(Col, null, issueVCBut)))));\n\n      var result = __jsx(PairOrCard, {\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        baseUrl: this.props.baseUrl,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.sealSession,\n        card: selfCard,\n        vcSent: this.props.vcSent,\n        sealSession: this.props.sealSession,\n        formDataUploaded: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.self !== undefined,\n        selfForm: __jsx(SelForm, {\n          onSubmit: this.submit\n        })\n      });\n\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), result, __jsx(Row, null, __jsx(HomeButton, {\n        baseUrl: this.props.baseUrl\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var reduxStore, req, userSessionData, DIDOk, sealSession, baseUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                reduxStore = _ref.reduxStore, req = _ref.req;\n\n                if (false) {\n                  userSessionData = req.session.userData;\n                  reduxStore.dispatch(setEndpoint(req.session.enpoint));\n                  baseUrl = req.session.baseUrl ? \"/\".concat(req.session.baseUrl, \"/\") : \"\";\n                  reduxStore.dispatch(setBaseUrl(baseUrl)); // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n\n                  DIDOk = req.session.DID;\n                  sealSession = req.session.sealSession;\n                  console.log(\"self.js:: in the server the seal session is:: \".concat(req.session.sealSession));\n                } else {\n                  if (reduxStore.getState().sessionData) {\n                    userSessionData = reduxStore.getState().sessionData;\n                    DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n                    sealSession = reduxStore.getState().sealSession; // serverSessionId = reduxStore.getState().serverSessionId;\n                  } else {\n                    console.log(\"no server session data found\");\n                  }\n                } //this way the userSessionData gets set in all settings\n\n\n                if (userSessionData) {\n                  reduxStore.dispatch(setSessionData(userSessionData));\n                }\n\n                if (DIDOk) {\n                  reduxStore.dispatch(completeDIDAuth(sealSession));\n                  reduxStore.dispatch(setSealSession(sealSession));\n                } //returned value here is getting mered with the mapstatetoprops\n                // mapstatetoprops overrides these values if they match\n\n\n                return _context.abrupt(\"return\", {\n                  sessionData: userSessionData,\n                  qrData: reduxStore.getState().qrData,\n                  vcSent: false,\n                  sealSession: reduxStore.getState().sealSession\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return IssueAmka;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri\n  };\n}\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setSelftToSession: function setSelftToSession(userSessionData) {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: function setSefToSelection(set) {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: function setSteps(steps) {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: function setEndPoint(endpont) {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: function makeConnectionRequest(sealSession, baseUrl, isMobile) {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: function didAuthOK(uuid) {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: function startSealSession(baseUrl) {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: function startSessionAndDidAuth(baseUrl, isMobile) {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: function setTheSealSession(sessionId) {\n      dispatch(setSealSession(sessionId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueAmka);","map":{"version":3,"sources":["/home/ni/code/js/sbchain-issuer/pages/vc/issue/self.js"],"names":["React","axios","SelForm","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","completeDIDAuth","makeSealSession","makeSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","isMobile","ConnectMobile","transport","require","IssueAmka","props","values","valueAttributesNames","forEach","name","console","log","employed","employmentStatus","source","toSelect","setSefToSelection","post","session","sealSession","details","then","data","response","setSelftToSession","self","error","dispatch","isFetching","sessionData","hasRequiredAttributes","undefined","amka","DID","startSessionAndDidAuth","baseUrl","makeConnectionRequest","stepNumber","stepperSteps","title","qrData","uuid","issueVCBut","userSelection","selfCard","marginTop","result","vcSent","submit","reduxStore","req","userSessionData","userData","enpoint","DIDOk","getState","Component","mapStateToProps","state","appReducer","fetching","eidasUri","eidasPort","endpoint","eidasRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","didAuthOK","startSealSession","setTheSealSession","sessionId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport SelForm from \"../../../components/SelForm\";\n\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  // setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport ConnectMobile from \"../../../components/ConnectMobile\"\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueAmka extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.self !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(\n        `self.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n        // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.sessionData && this.props.sessionData.self) {\n      let toSelect = [this.props.sessionData.amka];\n      this.props.setSefToSelection(toSelect);\n    }\n\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          isMobile()\n        );\n      }\n    }\n  }\n\n  // componentDidUpdate() {\n  //   if (this.props.sessionData && this.props.sessionData.self) {\n  //     let toSelect = [this.props.sessionData.self];\n  //     this.props.setSefToSelection(toSelect);\n  //   }\n  // }\n\n  submit = (values) => {\n    // print the form values to the console\n    let valueAttributesNames = [  \"oaedid\", \"hospitalized\", \"hospitalizedSpecific\",\"monk\", \"luxury\", \"none\", \"employed\"]\n    valueAttributesNames.forEach(name =>{\n      if(!values[name]) {\n        values[name] = \"false\";\n      }\n    })      \n    \n    console.log(values);\n    // values.loa = \"low\";\n    if(values.employed){\n      values.employmentStatus=\"employed\"\n    }else{\n      values.employmentStatus=\"unemployed\"\n    }\n    values.source = \"self\";\n    let toSelect = [values];\n\n\n\n    this.props.setSefToSelection(toSelect);\n    axios\n      .post(\"../../self/store\", {\n        session: this.props.sealSession,\n        details: values,\n      })\n      .then((data) => {\n        console.log(\"updated backend with selection\");\n      })\n      .then((response) => {\n        this.props.setSelftToSession({ self: values });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  render() {\n\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Pair your wallet\" },\n      { title: \"Declare Self Attested Attributes\" },\n      { title: \"Request Issuance\" },\n    ];\n\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.uuid}\n            sealSession={this.props.uuid}\n          />\n        </Layout>\n      );\n    }\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={\n          this.props.sessionData !== null &&\n          this.props.sessionData !== undefined &&\n          this.props.sessionData.self !== undefined\n        }\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"SELF\"}\n      />\n    );\n\n    let selfCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>\n          Issue a Verifiable Credential containing self attested attributes\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n           You have completed the self attestation of the required attributes, click\n            the \"Issue\" button to generate and receive your VC .\n          </Card.Text>\n          <Container>\n            <Row>\n              <Col>{issueVCBut}</Col>\n            </Row>\n          </Container>\n        </Card.Body>\n      </Card>\n    );\n\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.sealSession}\n        card={selfCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        formDataUploaded={\n          this.props.sessionData !== null &&\n          this.props.sessionData !== undefined &&\n          this.props.sessionData.self !== undefined\n        }\n        selfForm={<SelForm onSubmit={this.submit} />}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSelftToSession: (userSessionData) => {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueAmka);\n"]},"metadata":{},"sourceType":"module"}