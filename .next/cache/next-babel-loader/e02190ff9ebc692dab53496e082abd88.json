{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { setSessionData, makeOnlyConnectionRequest, addSetToSelection, setStepperSteps, setEndpoint, setBaseUrl // setServerSessionId,\n, completeDIDAuth, makeSealSession, makeSessionWithDIDConnecetionRequest, setSealSession, setEidasUriPort, setEidasRedirectUri } from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport EndorseBillForm from \"../../../components/endorseBillForm\";\nimport ConnectMobile from \"../../../components/ConnectMobile\";\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\n\nclass IssueEbill extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"submit\", values => {\n      console.log(values);\n      values.source = \"ebill\";\n      values.address = {\n        'street': values.street,\n        'number': values.number,\n        'municipality': values.municipality,\n        'po': values.po\n      };\n      let toSelect = [values];\n      this.props.setSefToSelection(toSelect);\n      axios.post(\"../../endorse/ebill/store\", {\n        session: this.props.sealSession,\n        details: values\n      }).then(data => {\n        console.log(\"updated backend with selection\");\n        console.log(data);\n        this.props.setEBillToSession({\n          ebill: values\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    });\n\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes = props.sessionData !== null && props.sessionData !== undefined && props.sessionData.ebill !== undefined;\n  }\n\n  static async getInitialProps({\n    reduxStore,\n    req\n  }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n\n    if (true) {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl)); // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(`self.js:: in the server the seal session is:: ${req.session.sealSession}`);\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID; //if ther is sessionData then there should be a session as well\n\n        sealSession = reduxStore.getState().sealSession; // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    } //this way the userSessionData gets set in all settings\n\n\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    } //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n\n\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(this.props.sealSession, this.props.baseUrl, isMobile());\n      }\n    }\n  }\n\n  render() {\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [{\n      title: \"Συνδέστε το κινητό σας\"\n    }, {\n      title: 'Συμπληρώστε τα πεδία'\n    } // { title: \"Request Endorsement\" },\n    ];\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n        steps: stepperSteps,\n        activeNum: stepNumber\n      }))), __jsx(ConnectMobile, {\n        baseUrl: this.props.baseUrl,\n        qrData: this.props.qrData,\n        DID: this.props.DID,\n        uuid: this.props.uuid,\n        serverSessionId: this.props.uuid,\n        sealSession: this.props.uuid\n      }));\n    }\n\n    let issueVCBut = __jsx(IssueVCButton, {\n      hasRequiredAttributes: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.ebill !== undefined,\n      baseUrl: this.props.baseUrl,\n      userSelection: this.props.userSelection,\n      uuid: this.props.sealSession,\n      vcType: \"EBILL\"\n    });\n\n    let selfCard = __jsx(Card, {\n      className: \"text-center\",\n      style: {\n        marginTop: \"2rem\"\n      }\n    }, __jsx(Card.Header, null, \"\\u0394\\u03B7\\u03BC\\u03B9\\u03BF\\u03C5\\u03C1\\u03B3\\u03B5\\u03AF\\u03C3\\u03C4\\u03B5 \\u03BC\\u03B9\\u03B1 \\u03B7\\u03BB\\u03B5\\u03BA\\u03C4\\u03C1\\u03BF\\u03BD\\u03B9\\u03BA\\u03AE \\u03C4\\u03B1\\u03C5\\u03C4\\u03CC\\u03C4\\u03B7\\u03C4\\u03B1, \\u03BC\\u03B5 \\u03C4\\u03B1 \\u03BA\\u03AC\\u03C4\\u03C9\\u03B8\\u03B9 \\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03B5\\u03AF\\u03B1\"), __jsx(Card.Body, null, __jsx(Card.Title, null, this.hasRequiredAttributes ? \"Credentials Issuance is ready!\" : \"Please authenticate to the required data sources\"), __jsx(Card.Text, null, \"\\u039F\\u03BB\\u03BF\\u03BA\\u03BB\\u03B7\\u03C1\\u03CE\\u03C3\\u03B1\\u03C4\\u03B5 \\u03C4\\u03B7\\u03BD \\u03B1\\u03AF\\u03C4\\u03B7\\u03C3\\u03B7 \\u03B5\\u03C0\\u03B9\\u03B2\\u03B1\\u03B9\\u03B2\\u03AD\\u03C9\\u03C3\\u03B7\\u03C2 \\u03C4\\u03C9\\u03BD \\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03B5\\u03AF\\u03C9\\u03BD \\u03C0\\u03BF\\u03C5 \\u03B4\\u03B7\\u03BB\\u03CE\\u03C3\\u03B1\\u03C4\\u03B5. \\u039C\\u03CC\\u03BB\\u03B9\\u03C2, \\u03C4\\u03B1 \\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03B5\\u03AF\\u03B1 \\u03B5\\u03C0\\u03B9\\u03B2\\u03B5\\u03B2\\u03B1\\u03B9\\u03C9\\u03B8\\u03BF\\u03CD\\u03BD \\u03B1\\u03C0\\u03CC \\u03C4\\u03BF\\u03BD \\u03B1\\u03C1\\u03BC\\u03CC\\u03B4\\u03B9\\u03BF \\u03C6\\u03BF\\u03C1\\u03AD\\u03B1, \\u03CC\\u03C0\\u03C9\\u03C2 \\u03B5\\u03C3\\u03B5\\u03AF\\u03C2 \\u03C4\\u03BF\\u03BD \\u03B4\\u03B7\\u03BB\\u03CE\\u03C3\\u03B1\\u03C4\\u03B5, \\u03C4\\u03BF \\u03B1\\u03BD\\u03C4\\u03AF\\u03C3\\u03C4\\u03BF\\u03B9\\u03C7\\u03BF \\u03C0\\u03B9\\u03C3\\u03C4\\u03BF\\u03C0\\u03BF\\u03B9\\u03B7\\u03C4\\u03B9\\u03BA\\u03CC (Verifiable Credential) \\u03B8\\u03B1 \\u03C3\\u03C4\\u03B1\\u03BB\\u03B5\\u03AF \\u03C3\\u03C4\\u03BF \\u03BA\\u03B9\\u03BD\\u03B7\\u03C4\\u03CC \\u03C3\\u03B1\\u03C2.\"), __jsx(Container, null)));\n\n    let result = __jsx(PairOrCard, {\n      qrData: this.props.qrData,\n      DID: this.props.DID,\n      baseUrl: this.props.baseUrl,\n      uuid: this.props.uuid,\n      serverSessionId: this.props.sealSession,\n      card: selfCard,\n      vcSent: this.props.vcSent,\n      sealSession: this.props.sealSession,\n      formDataUploaded: this.props.sessionData !== null && this.props.sessionData !== undefined && this.props.sessionData.ebill !== undefined,\n      selfForm: __jsx(EndorseBillForm, {\n        onSubmit: this.submit\n      })\n    });\n\n    return __jsx(Layout, null, __jsx(Row, null, __jsx(Col, null, __jsx(MyStepper, {\n      steps: stepperSteps,\n      activeNum: stepNumber\n    }))), result, __jsx(Row, null, __jsx(HomeButton, {\n      baseUrl: this.props.baseUrl\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection,\n    // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setEBillToSession: userSessionData => {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: set => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: steps => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: endpont => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: uuid => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: baseUrl => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: sessionId => {\n      dispatch(setSealSession(sessionId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueEbill);","map":{"version":3,"sources":["/home/ni/code/js/sbchain-issuer/pages/endorse/issue/ebill.js"],"names":["React","axios","setSessionData","makeOnlyConnectionRequest","addSetToSelection","setStepperSteps","setEndpoint","setBaseUrl","completeDIDAuth","makeSealSession","makeSessionWithDIDConnecetionRequest","setSealSession","setEidasUriPort","setEidasRedirectUri","Layout","connect","Button","Row","Col","Card","Container","MyStepper","HomeButton","IssueVCButton","PairOrCard","isMobile","EndorseBillForm","ConnectMobile","transport","require","IssueEbill","Component","constructor","props","values","console","log","source","address","street","number","municipality","po","toSelect","setSefToSelection","post","session","sealSession","details","then","data","setEBillToSession","ebill","catch","error","dispatch","isFetching","sessionData","hasRequiredAttributes","undefined","getInitialProps","reduxStore","req","userSessionData","DIDOk","userData","enpoint","baseUrl","DID","getState","qrData","vcSent","componentDidMount","startSessionAndDidAuth","makeConnectionRequest","render","stepNumber","stepperSteps","title","uuid","issueVCBut","userSelection","selfCard","marginTop","result","submit","mapStateToProps","state","appReducer","fetching","eidasUri","eidasPort","endpoint","eidasRedirectUri","mapDispatchToProps","set","setSteps","steps","setEndPoint","endpont","didAuthOK","startSealSession","setTheSealSession","sessionId"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nimport {\n  setSessionData,\n  makeOnlyConnectionRequest,\n  addSetToSelection,\n  setStepperSteps,\n  setEndpoint,\n  setBaseUrl,\n  // setServerSessionId,\n  completeDIDAuth,\n  makeSealSession,\n  makeSessionWithDIDConnecetionRequest,\n  setSealSession,\n  setEidasUriPort,\n  setEidasRedirectUri,\n} from \"../../../store\";\nimport Layout from \"../../../components/Layout\";\nimport { connect } from \"react-redux\";\nimport { Button, Row, Col, Card, Container } from \"react-bootstrap\";\nimport MyStepper from \"../../../components/Stepper\";\nimport HomeButton from \"../../../components/HomeButton\";\nimport IssueVCButton from \"../../../components/IssueVCButton\";\nimport PairOrCard from \"../../../components/PairOrCard\";\nimport isMobile from \"../../../helpers/isMobile\";\nimport EndorseBillForm from \"../../../components/endorseBillForm\";\nimport ConnectMobile from \"../../../components/ConnectMobile\"\n\nconst transport = require(\"uport-transports\").transport;\n/*\n  Secure flow:\n  - check in session if DID is present. This is not only the DID of the user but the whole connection response\n  - if it is not present:\n    - first display DID connection request (QR etc.). The DID response endpoint should contain the session here\n    - on response on the server, send a SSE to the front end, denoting that DID auth is completed and on the server there is the DID component\n    - Display additional datasources\n    - on VC issance request, do not display QR code etc, but send the credentials straigth to the users wallet\n\n*/\n\nclass IssueEbill extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dispatch = props.dispatch;\n    this.isFetching = props.isFetching;\n    this.sessionData = props.sessionData;\n    this.hasRequiredAttributes =\n      props.sessionData !== null &&\n      props.sessionData !== undefined &&\n      props.sessionData.ebill !== undefined;\n  }\n\n  static async getInitialProps({ reduxStore, req }) {\n    let userSessionData;\n    let DIDOk;\n    let sealSession;\n    if (typeof window === \"undefined\") {\n      userSessionData = req.session.userData;\n      reduxStore.dispatch(setEndpoint(req.session.enpoint));\n      let baseUrl = req.session.baseUrl ? `/${req.session.baseUrl}/` : \"\";\n      reduxStore.dispatch(setBaseUrl(baseUrl));\n      // reduxStore.dispatch(setServerSessionId(req.session.sealSession));\n      DIDOk = req.session.DID;\n      sealSession = req.session.sealSession;\n      console.log(\n        `self.js:: in the server the seal session is:: ${req.session.sealSession}`\n      );\n    } else {\n      if (reduxStore.getState().sessionData) {\n        userSessionData = reduxStore.getState().sessionData;\n        DIDOk = reduxStore.getState().DID;\n        //if ther is sessionData then there should be a session as well\n        sealSession = reduxStore.getState().sealSession;\n        // serverSessionId = reduxStore.getState().serverSessionId;\n      } else {\n        console.log(`no server session data found`);\n      }\n    }\n\n    //this way the userSessionData gets set in all settings\n    if (userSessionData) {\n      reduxStore.dispatch(setSessionData(userSessionData));\n    }\n    if (DIDOk) {\n      reduxStore.dispatch(completeDIDAuth(sealSession));\n      reduxStore.dispatch(setSealSession(sealSession));\n    }\n\n    //returned value here is getting mered with the mapstatetoprops\n    // mapstatetoprops overrides these values if they match\n    return {\n      sessionData: userSessionData,\n      qrData: reduxStore.getState().qrData,\n      vcSent: false,\n      sealSession: reduxStore.getState().sealSession,\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.DID) {\n      //if DID auth has not been completed\n      if (!this.props.sealSession) {\n        this.props.startSessionAndDidAuth(this.props.baseUrl, isMobile()); //and then makeConnectionRequest\n      } else {\n        this.props.makeConnectionRequest(\n          this.props.sealSession,\n          this.props.baseUrl,\n          isMobile()\n        );\n      }\n    }\n  }\n\n \n  submit = (values) => {\n   \n    console.log(values);\n    values.source = \"ebill\";\n    values.address = {\n      'street': values.street,\n      'number': values.number,\n      'municipality': values.municipality,\n      'po':values.po \n    }\n\n    let toSelect = [values];\n    this.props.setSefToSelection(toSelect);\n    axios\n      .post(\"../../endorse/ebill/store\", {\n        session: this.props.sealSession,\n        details: values,\n      })\n      .then((data) => {\n        console.log(\"updated backend with selection\");\n        console.log(data)\n        this.props.setEBillToSession({ ebill: values });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  render() {\n\n    let stepNumber = !this.props.DID ? 0 : this.hasRequiredAttributes ? 2 : 1;\n    let stepperSteps = [\n      { title: \"Συνδέστε το κινητό σας\" },\n      { title: 'Συμπληρώστε τα πεδία' },\n      // { title: \"Request Endorsement\" },\n    ];\n\n\n\n    if (this.props.qrData && isMobile() && !this.props.DID) {\n      return (\n        <Layout>\n          <Row>\n            <Col>\n              <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n            </Col>\n          </Row>\n          <ConnectMobile\n            baseUrl={this.props.baseUrl}\n            qrData={this.props.qrData}\n            DID={this.props.DID}\n            uuid={this.props.uuid}\n            serverSessionId={this.props.uuid}\n            sealSession={this.props.uuid}\n          />\n        </Layout>\n      );\n    }\n\n    let issueVCBut = (\n      <IssueVCButton\n        hasRequiredAttributes={\n          this.props.sessionData !== null &&\n          this.props.sessionData !== undefined &&\n          this.props.sessionData.ebill !== undefined\n        }\n        baseUrl={this.props.baseUrl}\n        userSelection={this.props.userSelection}\n        uuid={this.props.sealSession}\n        vcType={\"EBILL\"}\n      />\n    );\n\n    let selfCard = (\n      <Card className=\"text-center\" style={{ marginTop: \"2rem\" }}>\n        <Card.Header>\n          Δημιουργείστε μια ηλεκτρονική ταυτότητα, με τα κάτωθι στοιχεία\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>\n            {this.hasRequiredAttributes\n              ? \"Credentials Issuance is ready!\"\n              : \"Please authenticate to the required data sources\"}\n          </Card.Title>\n          <Card.Text>\n            Ολοκληρώσατε την αίτηση επιβαιβέωσης των στοιχείων που δηλώσατε. Μόλις, τα στοιχεία επιβεβαιωθούν από τον αρμόδιο φορέα, \n            όπως εσείς τον δηλώσατε, το αντίστοιχο πιστοποιητικό (Verifiable Credential) θα σταλεί στο κινητό σας. \n          </Card.Text>\n          <Container>\n            {/* <Row>\n              <Col>{issueVCBut}</Col>\n            </Row> */}\n          </Container>\n        </Card.Body>\n      </Card>\n    );\n\n\n    let result = (\n      <PairOrCard\n        qrData={this.props.qrData}\n        DID={this.props.DID}\n        baseUrl={this.props.baseUrl}\n        uuid={this.props.uuid}\n        serverSessionId={this.props.sealSession}\n        card={selfCard}\n        vcSent={this.props.vcSent}\n        sealSession={this.props.sealSession}\n        formDataUploaded={\n          this.props.sessionData !== null &&\n          this.props.sessionData !== undefined &&\n          this.props.sessionData.ebill !== undefined\n        }\n        selfForm={<EndorseBillForm onSubmit={this.submit} />}\n      />\n    );\n\n    return (\n      <Layout>\n        <Row>\n          <Col>\n            <MyStepper steps={stepperSteps} activeNum={stepNumber} />\n          </Col>\n        </Row>\n        {result}\n\n        <Row>\n          <HomeButton baseUrl={this.props.baseUrl} />\n        </Row>\n      </Layout>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    isFetching: state.appReducer.fetching,\n    qrData: state.appReducer.qrData,\n    sessionData: state.appReducer.sessionData,\n    userSelection: state.appReducer.userSelection, // the attributes selected by the user to be included in a VC,\n    baseUrl: state.appReducer.baseUrl,\n    DID: state.appReducer.DID,\n    // serverSessionId: state.serverSessionId,\n    uuid: state.appReducer.uuid,\n    vcSent: state.appReducer.vcSent,\n    sealSession: state.appReducer.sealSession,\n    eidasUri: state.appReducer.eidasUri,\n    eidasPort: state.appReducer.eidasPort,\n    endpoint: state.appReducer.endpoint,\n    eidasRedirectUri: state.appReducer.eidasRedirectUri,\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setEBillToSession: (userSessionData) => {\n      dispatch(setSessionData(userSessionData));\n    },\n    setSefToSelection: (set) => {\n      dispatch(addSetToSelection(set));\n    },\n    setSteps: (steps) => {\n      dispatch(setStepperSteps(steps));\n    },\n    setEndPoint: (endpont) => {\n      dispatch(setEndpoint(endpoint));\n    },\n    makeConnectionRequest: (sealSession, baseUrl, isMobile) => {\n      dispatch(makeOnlyConnectionRequest(sealSession, baseUrl, isMobile));\n    },\n    didAuthOK: (uuid) => {\n      dispatch(completeDIDAuth(uuid));\n    },\n    startSealSession: (baseUrl) => {\n      dispatch(makeSealSession(baseUrl));\n    },\n    startSessionAndDidAuth: (baseUrl, isMobile) => {\n      dispatch(makeSessionWithDIDConnecetionRequest(baseUrl, isMobile));\n    },\n    setTheSealSession: (sessionId) => {\n      dispatch(setSealSession(sessionId));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IssueEbill);\n"]},"metadata":{},"sourceType":"module"}